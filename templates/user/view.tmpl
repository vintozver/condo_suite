{% extends "skeleton" %}

{% block title %}View - User - {{ super() }}{% endblock %}

{% block body_content %}
<div class="user_view">
<form action="">
<h1>User</h1>
<table>
<tr><th>Name</th><td>
<span id="user_name_view"><span>{{user.name|default('-')|e }}</span> {% if perm_edit|default(False) %}<a href="#">edit</a>{% endif %}</span>
{% if perm_edit|default(False) -%}
<span id="user_name_edit"><input type="text" name="user_name" size="16" maxlength="64" {{ {'value': user.name|default('')}|xmlattr}} /><button type="button">ok</button></span>
{%- endif %}
</td></tr>
<tr><th>Email</th><td>
<span id="user_email_view"><span>{{user.email|default('-')|e }}</span> {% if perm_edit|default(False) %}<a href="#">edit</a>{% endif %}</span>
{% if perm_edit|default(False) -%}
<span id="user_email_edit"><input type="text" name="user_email" size="32" maxlength="64" {{ {'value': user.email|default('')}|xmlattr}} /><button type="button">ok</button></span>
{%- endif %}
</td></tr>
</table>
</form>
</div>

<div class="ssl_crt">
<h3>SSL Certificates</h3>
<table>
<thead>
<tr><th>serial</th><th>subject_dn</th><th>issuer_dn</th></tr>
</thead>
<tbody><tr><td></td><td></td><td></td></tr></tbody><!-- empty row is necessary to conform w3c -->
</table>

<div style="display: none;" id="ssl_crt_add" title="Add certificate">
  <p class="validateTips">All form fields are required.</p>
  <form id="ssl_crt_form" action="">
  <table>
      <tr><td><label for="serial">serial</label></td><td><input type="text" name="serial" id="serial" value="" class="text ui-widget-content ui-corner-all" /></td></tr>
      <tr><td><label for="subject_dn">subject_dn</label></td><td><input type="text" name="subject_dn" id="subject_dn" value="" class="text ui-widget-content ui-corner-all" /></td></tr>
      <tr><td><label for="issuer_dn">issuer_dn</label></td><td><input type="text" name="issuer_dn" id="issuer_dn" value="" class="text ui-widget-content ui-corner-all" /></td></tr>
  </table>
  <!-- Allow form submission with keyboard without duplicating the dialog button -->
  <div style="display: none;"><input type="submit" /></div>
  </form>
</div>

<div style="display: none;" id="ssl_crt_remove_confirm" title="Delete certificate?">
<p><span class="ui-icon ui-icon-alert" style="float:left; margin:0 7px 20px 0;"></span>Certificate reference will be permanently deleted and cannot be recovered. Are you sure?</p>
</div>

</div>

<div class="agent">
    <h3>Assigned agents</h3>
    <table>
        <thead>
            <tr><th>Name</th><th>Position</th></tr>
        </thead>
        <tbody><tr><td></td><td></td></tr></tbody><!-- empty row is necessary to conform w3c -->
    </table>

    <div style="display: none;" id="agent_add" title="Add agent">
      <p class="validateTips">All form fields are required.</p>
      <form action="">
          <table>
              <tr><td><input type="hidden" name="agent_id" value="" /><label for="agent_add__agent_name">Name</label></td><td><input type="text" name="agent_name" value="" id="agent_add__agent_name" class="text ui-widget-content ui-corner-all" /></td></tr>
              <tr><td><label for="agent_add__agent_position">Position</label></td><td><input type="text" name="agent_position" value="" id="agent_add__agent_position" class="text ui-widget-content ui-corner-all" /></td></tr>
          </table>
          <div style="display: none;"><input type="submit" /></div>
      </form>
    </div>

    <div style="display: none;" id="agent_remove_confirm" title="Delete agent?">
    <p><span class="ui-icon ui-icon-alert" style="float:left; margin:0 7px 20px 0;"></span>Agent reference will be permanently deleted and cannot be recovered. Are you sure?</p>
    </div>

    <div style="display: none;" id="agent_update" title="Update the agent">
      <p class="validateTips">All form fields are required.</p>
      <form action="">
          <table>
              <tr><td><input type="hidden" name="agent_id" value="" /><label for="agent_update__agent_name">Name</label></td><td><input type="text" name="agent_name" value="" readonly="readonly" id="agent_update__agent_name" class="text ui-widget-content ui-corner-all" /></td></tr>
              <tr><td><label for="agent_update__agent_position">Position</label></td><td><input type="text" name="agent_position" value="" id="agent_update__agent_position" class="text ui-widget-content ui-corner-all" /></td></tr>
          </table>
          <div style="display: none;"><input type="submit" /></div>
      </form>
    </div>
</div>

<div class="role">
<h3>Roles</h3>
<form action="">
{% if roles|length > 0 %}
<table>
<thead><tr><th>Role</th><th>flag</th></tr></thead><tbody>
{% for role, role_active in roles %}
<tr>
<td>{{ role['name']|default('<no name>')|e }}</td>
<td><input type="checkbox" {{ {'name': 'role_%s' % role['uuid'].hex, 'value': '1'}|xmlattr }} {% if role_active%}checked="checked"{% endif %} readonly="readonly" /></td>
</tr>
{% endfor %}
</tbody>
</table>
{% else %}
<p>No roles.</p>
{% endif %}
</form>
{% if myself and (perm_role_admin_add or perm_role_admin_remove) -%}
<p>Admin role management has been disabled for this user because it's the same as logged in user.</p>
{%- endif %}
</div>

<script type="text/javascript">
// raw script begin <![CDATA[
$(function () {

var user_id = {{ user.id|string|json }};

{% if perm_edit|default(False) -%}

var wrap_text_edit = function (id, update_id) {
    var id_view = $(sprintf("div.user_view form span#%s_view", id));
    var id_edit = $(sprintf("div.user_view form span#%s_edit", id));

    id_view.show();
    id_edit.hide();

    id_view.find("a").click(function (e) {
        e.preventDefault();
        id_view.hide();
        id_edit.show();
    });

    id_edit.find("button").click(function () {
        var new_value = id_edit.find("input[type=text]").val();
        var update_set = new Object();
        update_set[update_id] = new_value;
        var finalize = function () {
            id_edit.hide();
            id_view.show();
        };
        $.ajax({method: "POST", url: sprintf("/user/update/%s", user_id),
            contentType: "application/json",
            data: JSON.stringify({op: "info/set", args: update_set}),
            dataType: "json",
            success: function (data, textStatus, jqXHR) {
                id_view.find("span").text(new_value);
                finalize();
            },
            error: function (jqXHR, textStatus, errorThrown) {
                finalize();
            },
            timeout: 3000
        });
    });
};

wrap_text_edit("user_name", "name");
wrap_text_edit("user_email", "email");

{%- endif %}


// SSL certificate

var user_ssl_crt_table = $("div.ssl_crt table:first");
var user_ssl_crt_table_customFooterButtons = new Array();
{% if perm_ssl_crt_add|default(False) %}
user_ssl_crt_table_customFooterButtons.push({uiButton: { icons: { primary: "ui-icon-plus" }, text: false }, btnAttr: { title: "Add a certificate" }, atTheFront: true,
    click: function (evt) {
        ssl_crt_add_dialog.dialog("open");
    }
});
var ssl_crt_add_dialog = $("div#ssl_crt_add");
ssl_crt_add_dialog.dialog({autoOpen: false, height: 250, width: 350, modal: true,
    buttons: {
        "Add a certificate": function () {
            user_ssl_crt_table_handler_add();
        },
        Cancel: function () {
            ssl_crt_add_dialog.dialog("close");
        }
    },
    close: function () {
        ssl_crt_add_dialog.find("#ssl_crt_form").trigger("reset");
    }
});
ssl_crt_add_dialog.find("#ssl_crt_form").submit(function (event) {
    event.preventDefault();
    user_ssl_crt_table_handler_add();
});
var user_ssl_crt_table_handler_add = function () {
    dialog = $("div#ssl_crt_add");
    var serial = dialog.find("#ssl_crt_form input[type=text][name=serial]").val();
    var subject_dn = dialog.find("#ssl_crt_form input[type=text][name=subject_dn]").val();
    var issuer_dn = dialog.find("#ssl_crt_form input[type=text][name=issuer_dn]").val();

    ssl_crt_add(serial, subject_dn, issuer_dn,
        function () {
            user_ssl_crt_table.appendGrid("appendRow", [{serial: serial, subject_dn: subject_dn, issuer_dn: issuer_dn}]);
            ssl_crt_add_dialog.dialog("close");
        },
        function () {
            ssl_crt_add_dialog.dialog("close");
        }
    );
};
{% endif %}
var user_ssl_crt_table_customRowButtons = new Array();
{% if perm_ssl_crt_remove|default(False) %}
user_ssl_crt_table_customRowButtons.push({ uiButton: { icons: { primary: "ui-icon-minus" }, text: false }, btnAttr: { title: "Remove certificate" }, atTheFront: true,
    click: function (evt, uniqueIndex, rowData) {
        var ssl_crt_remove_confirm_dialog = $("div#ssl_crt_remove_confirm");
        ssl_crt_remove_confirm_dialog.dialog({autoOpen: false, resizable: false, width: 400, height: 200, modal: true,
            buttons: {
                "Proceed to delete": function () {
                    ssl_crt_remove(rowData.serial, rowData.subject_dn, rowData.issuer_dn,
                        function () {
                            user_ssl_crt_table.appendGrid("removeRow", user_ssl_crt_table.appendGrid("getRowIndex", uniqueIndex));
                            ssl_crt_remove_confirm_dialog.dialog("close");
                        },
                        function () {
                            ssl_crt_remove_confirm_dialog.dialog("close");
                        }
                    );
                },
                Cancel: function () {
                    ssl_crt_remove_confirm_dialog.dialog("close");
                }
            }
        });
        ssl_crt_remove_confirm_dialog.dialog("open");
    }
});
{% endif %}
user_ssl_crt_table.appendGrid({
	columns: [
		{name: "serial", display: "serial", displayCss: {"min-width": "8em", "width": "8em"}, resizable: true, ctrlProp: {readonly: true}},
		{name: "subject_dn", display: "subject_dn", displayCss: {"min-width": "10em", "width": "24em"}, resizable: true, ctrlProp: {readonly: true}},
		{name: "issuer_dn", display: "issuer_dn", displayCss: {"min-width": "10em", "width": "24em"}, resizable: true, ctrlProp: {readonly: true}},
	],
	i18n: {
	    rowEmpty: "No SSL certificates"
	},
	initRows: 0,
	hideRowNumColumn: true,
	customRowButtons: user_ssl_crt_table_customRowButtons,
	customFooterButtons: user_ssl_crt_table_customFooterButtons,
	hideButtons: { moveUp: true, moveDown: true, insert: true, removeLast: true, append: true, remove: true }
});
{{ ssl_crt_list|json }}.forEach(function (user_ssl_crt) {
    user_ssl_crt_table.appendGrid("appendRow", [{serial: user_ssl_crt.serial, subject_dn: user_ssl_crt.subject_dn, issuer_dn: user_ssl_crt.issuer_dn}]);
});

var ssl_crt_manage = function (op, serial, subject_dn, issuer_dn, success_callback, failure_callback) {
    $.ajax({method: "POST", url: sprintf("/user/update/%s", user_id),
        contentType: "application/json",
        data: JSON.stringify({op: sprintf("ssl_crt/%s", op), args: {serial: serial, subject_dn: subject_dn, issuer_dn: issuer_dn}}),
        dataType: "json",
        success: function (data, textStatus, jqXHR) {
            success_callback();
        },
        error: function (jqXHR, textStatus, errorThrown) {
            failure_callback();
        },
        timeout: 3000
    });
};
var ssl_crt_add = function (serial, subject_dn, issuer_dn, success_callback, failure_callback) {
    return ssl_crt_manage("add", serial, subject_dn, issuer_dn, success_callback, failure_callback);
};
var ssl_crt_remove = function (serial, subject_dn, issuer_dn, success_callback, failure_callback) {
    return ssl_crt_manage("remove", serial, subject_dn, issuer_dn, success_callback, failure_callback);
};


// Agent
var user_agent_table = $("div.agent table:first");
var user_agent_table_customFooterButtons = new Array();
{% if perm_agent_add|default(False) %}
// create footer buttons array for user agents table
user_agent_table_customFooterButtons.push({
    uiButton: { icons: { primary: "ui-icon-plus" }, text: false },
    btnAttr: { title: "Add agent" },
    atTheFront: true,
    click: function (evt) {
        show_agent_add_dialog(function(id_agent, agent_name, agent_position, finalize_callback) {
            if (id_agent != ""){
                // user add agent handler
                agent_add(agent_name, agent_position,
                    function () {
                        user_agent_table.appendGrid("appendRow", [{agent_name: agent_name, agent_position: agent_position}]).find("input[type=hidden]").val(id_agent);
                        finalize_callback();
                    },
                    function () {
                        finalize_callback();
                    },
                    id_agent
                );
            } else {
                $("div#agent_add form input[type=text][name=agent_name]").css("border-color", "red");  // TODO: must be implemented through validator callbacks
            }
        });
    }
});

// transform agent_add html block to popup dialog
var show_agent_add_dialog = function (confirm_callback /* id, name, position, finalize_callback */) {
    var thedialog = $("div#agent_add");

    var finalize = function () {
        thedialog.dialog("close");
    };

    var confirm = function () {
        var id_agent = thedialog.find("form input[type=hidden][name=agent_id]").val();
        var agent_name = thedialog.find("form input[type=text][name=agent_name]").val();
        var agent_position = thedialog.find("form input[type=text][name=agent_position]").val();

        confirm_callback(id_agent, agent_name, agent_position, finalize);
    };

    thedialog.dialog({
        autoOpen: false,
        height: 250,
        width: 350,
        modal: true,
        buttons: [
            {text: "Add agent", click: function () {
                confirm();
            }},
            {text: "Cancel", click: function () {
                thedialog.dialog("close");
            }},
        ],
        close: function () {
            thedialog.find("form").trigger("reset");
            thedialog.find("form").off("submit");
        }
    });

    thedialog.find("form").submit(function(e){
        e.preventDefault();
        confirm();
    });

    thedialog.dialog("open");
};
{% endif %}

// add control buttons for each agent rows in the table
var user_agent_table_customRowButtons = new Array();
{% if perm_agent_remove|default(False) %}
// remove agent from user
user_agent_table_customRowButtons.push({
    uiButton: { icons: { primary: "ui-icon-minus" }, text: false },
    btnAttr: { title: "Remove agent" },
    atTheFront: true,
    click: function (evt, uniqueIndex, rowData) {
        var id_agent = user_agent_table.appendGrid("getCtrlValue", "id_agent", user_agent_table.appendGrid("getRowIndex", uniqueIndex));
        var agent_remove_confirm_dialog = $("div#agent_remove_confirm");
        agent_remove_confirm_dialog.dialog({autoOpen: false, resizable: false, width: 400, height: 200, modal: true,
            buttons: {
                "Proceed to delete": function () {
                    agent_remove(rowData.agent_name, rowData.agent_position,
                        function () {
                            user_agent_table.appendGrid("removeRow", user_agent_table.appendGrid("getRowIndex", uniqueIndex));
                            agent_remove_confirm_dialog.dialog("close");
                        },
                        function () {
                            agent_remove_confirm_dialog.dialog("close");
                        },
                        id_agent
                    );
                },
                Cancel: function () {
                    agent_remove_confirm_dialog.dialog("close");
                }
            }
        });
        agent_remove_confirm_dialog.dialog("open");
    }
});
{% endif %}

{% if perm_agent_update|default(False) %}
// update agent data for user
user_agent_table_customRowButtons.push({
    uiButton: { icons: { primary: "ui-icon-pencil" }, text: false },
    btnAttr: { title: "Update the agent details" },
    atTheFront: true,
    click: function (evt, uniqueIndex, rowData) {
        var rowIndex = user_agent_table.appendGrid("getRowIndex", uniqueIndex);
        var id_agent = user_agent_table.appendGrid("getCtrlValue", "id_agent", rowIndex);

        // no agent_name and agent_position before get agent
        var agent_name = "";
        var agent_position = "";

        agent_get(agent_name, agent_position,
            function () {
                var agent_name = user_agent_table.appendGrid("getCtrlValue", "agent_name", rowIndex);
                var agent_position = user_agent_table.appendGrid("getCtrlValue", "agent_position", rowIndex);
                show_agent_update_dialog(id_agent, agent_name, agent_position, function(agent_position, finalize_callback) {
                    agent_update(agent_name, agent_position,
                        function () {
                            user_agent_table.appendGrid("setCtrlValue", "agent_position", rowIndex, agent_position);
                            finalize_callback();
                        },
                        function () {
                            finalize_callback();
                        },
                        id_agent
                    );
                });
            },
            function () {
            },
            id_agent
        );
    }
});

// transform agent_update html block to popup dialog
var show_agent_update_dialog = function (id, name, position, confirm_callback /* position, finalize_callback */){
    var thedialog = $("div#agent_update");

    thedialog.find("form input[type=hidden][name=agent_id]").val(id);
    thedialog.find("form input[type=text][name=agent_name]").val(name);
    thedialog.find("form input[type=text][name=agent_position]").val(position);

    var finalize = function () {
        thedialog.dialog("close");
    };

    var confirm = function () {
        confirm_callback(thedialog.find("form input[type=text][name=agent_position]").val(), finalize);
    };

    thedialog.dialog({
        autoOpen: false,
        height: 250,
        width: 350,
        modal: true,
        buttons: [
            {text: "Update the agent", click: function () {
                confirm();
            }},
            {text: "Cancel", click: function () {
                thedialog.dialog("close");
            }},
        ],
        close: function () {
            thedialog.find("form").trigger("reset");
            thedialog.find("form").off("submit");
        }
    });

    thedialog.find("form").on("submit", function (event) {
        event.preventDefault();
        confirm();
    });

    thedialog.dialog("open");
}
{% endif %}

// init user agent table
user_agent_table.appendGrid({
    columns: [
        {type: "hidden", "name": "id_agent"},
        {name: "agent_name", display: "Name", displayCss: {"min-width": "8em", "width": "18em"}, resizable: true, ctrlProp: {readonly: true}},
        {name: "agent_position", display: "Position", displayCss: {"min-width": "10em", "width": "36em"}, resizable: true, ctrlProp: {readonly: true}},
    ],
    i18n: {
        rowEmpty: "No agent assigned"
    },
    initRows: 0,
    hideRowNumColumn: true,
    customRowButtons: user_agent_table_customRowButtons,
    customFooterButtons: user_agent_table_customFooterButtons,
    hideButtons: { moveUp: true, moveDown: true, insert: true, removeLast: true, append: true, remove: true }
});

// append user agent data to user agent table
{{ user_agent_list|json }}.forEach(function (user_agent) {
    user_agent_table.appendGrid("appendRow", [{id_agent: user_agent.agent_id, agent_name: user_agent.agent_name, agent_position: user_agent.agent_position}]);
});

// generic agent manager, used to generalize json request for (agent_add, agent_remove, agent_update) described below
var agent_manage = function (action, agent_name, agent_position, success_callback, failure_callback, agent_id) {
    $.ajax({
        method: "POST",
        url: sprintf("/user/update/%s", user_id),
        contentType: "application/json",
        data: JSON.stringify({op: sprintf("agent/%s", action), args: {agent_id: agent_id, agent_position: agent_position}}),
        dataType: "json",
        success: function (data, textStatus, jqXHR) {
            success_callback();
        },
        error: function (jqXHR, textStatus, errorThrown) {
            failure_callback();
        },
        timeout: 3000
    });
};
var agent_get = function (agent_name, agent_position, success_callback, failure_callback, agent_id) {
    return agent_manage("get", agent_name, agent_position, success_callback, failure_callback, agent_id);
};
var agent_add = function (agent_name, agent_position, success_callback, failure_callback, agent_id) {
    return agent_manage("add", agent_name, agent_position, success_callback, failure_callback, agent_id);
};
var agent_remove = function (agent_name, agent_position, success_callback, failure_callback, agent_id) {
    return agent_manage("remove", agent_name, agent_position, success_callback, failure_callback, agent_id);
};
var agent_update = function (agent_name, agent_position, success_callback, failure_callback, agent_id) {
    return agent_manage("update", agent_name, agent_position, success_callback, failure_callback, agent_id);
};

// autocomplete agent data
var agent_search = $("div#agent_add form");
var agent_search_id = agent_search.find("input[type=\"hidden\"][name=\"agent_id\"]");
var agent_search_name = agent_search.find("input[type=\"text\"][name=\"agent_name\"]");
var agent_search_position = agent_search.find("input[type=\"text\"][name=\"agent_position\"]");
agent_search_name.autocomplete({
    "source": function(request, response) {
        $.get("/user/helper/autocomplete/search/agent", {token: request["term"], user_id: user_id}, function(data, textStatus, jqXHR) {
            var ac_data = new Array();
            data.forEach(function(item) {
                var display = sprintf("%s", item["name"] || "<no name>")
                ac_data.push({"label": display, "value": item["name"], "id": item["id"], "position": item["position"]});
            });
            response(ac_data);
            // dialog plugin increase self css z-index to max value on focus, that's why we need increase value of autocomplete popup z-index each time, when change
            $(".ui-menu").css("z-index", $(".ui-menu").css("z-index") + 1);
        });
    },
    "select": function(event, ui) {
        agent_search_id.val(ui.item.id);
        agent_search_name.val(ui.item.value);
        agent_search_position.val(ui.item.position);
    }
});
agent_search_name.on("keypress", function(){
    agent_search_name.css("border-color", "#DDDDDD");
    agent_search_id.val("");
});

// Role

/*
 * This table contains the following rows:
 * - role:text
 * - flag: object(changeable:bool, active:bool)
 * If user can change the role, changeable is true
 * If the role is active for this user, active is true
 *
 * Notes
 * changeable means enabled/disabled checkbox
 * active means checked checkbox
 */
var user_role_table = $("div.role table");
user_role_table.appendGrid({
	columns: [
		{type: "text", name: "role", display: "Role", displayCss: {"min-width": "32em", "width": "48em"}, resizable: true, ctrlProp: {readonly: true}},
		{type: "custom", name: "flag", display: "flag", displayCss: {"min-width": "2em", "width": "2em"}, resizable: false,
		    customGetter: function (idPrefix, name, uniqueIndex) {
		        var ctrlId = sprintf("%s_%s_%d", idPrefix, name, uniqueIndex);
		        var ctrl = $(sprintf("input[type=checkbox][id=%s]", crtlId));
		        return {id: ctrl.attr("name"), active: ctrl.prop("checked"), changeable: !ctrl.prop("disabled")}
		    },
		    customSetter: function (idPrefix, name, uniqueIndex, value) {
		        var ctrlId = sprintf("%s_%s_%d", idPrefix, name, uniqueIndex);
		        var ctrl = $(sprintf("input[type=checkbox][id=%s]", ctrlId));
		        ctrl.attr("name", value.id);
		        ctrl.prop("checked", value.active);
		        ctrl.prop("disabled", !value.changeable);
		    },
		    customBuilder: function (parent, idPrefix, name, uniqueIndex) {
		        var ctrlId = sprintf("%s_%s_%d", idPrefix, name, uniqueIndex);
		        var ctrl = document.createElement("input");
		        ctrl.type = "checkbox";
		        $(ctrl).attr({id: ctrlId});
		        $(ctrl).change(function (evt) {
		            // When checkbox is clicked, this function is called
		            user_role_change_handler(ctrl);
		        })
		        $(ctrl).appendTo(parent);
		        return ctrl;
		    }
		},
	],
	i18n: {
	    rowEmpty: "No roles"
	},
	initRows: 0,
	hideRowNumColumn: true,
	hideButtons: { moveUp: true, moveDown: true, insert: true, removeLast: true, append: true, remove: true }
});
var perm_role_regular_add = {{ perm_role_regular_add|json }};
var perm_role_regular_remove = {{ perm_role_regular_remove|json }};
var perm_role_admin_add = {{ (not self and perm_role_admin_add)|json }};
var perm_role_admin_remove = {{ (not self and perm_role_admin_remove)|json }};
var role_matrix = {{ role_matrix|json }};
{{ role_list|json }}.forEach(function (user_role) {
    var changeable = null;
    if (user_role["type"] == "admin") {
        changeable = !user_role.active && perm_role_admin_add || user_role.active && perm_role_admin_remove;
    } else {
        changeable = !user_role.active && perm_role_regular_add || user_role.active && perm_role_regular_remove;
    }
    user_role_table.appendGrid("appendRow", [{role: user_role.name, flag: {id: user_role.id, active: user_role.active, changeable: changeable}}]);
});
var user_role_change_handler = function (ctrl) {
    // 1. get current state of checkbox and role
    // 2. send the corresponding ajax call to update the permission (add for checked, remove for unchecked)
    // 3. update the control changeability flag

    var id_role = $(ctrl).attr("name");
    var role = role_matrix[id_role];
    var role_active = $(ctrl).prop("checked");
    var ctrl_update = function () {
        var changeable = null;
        if (role["type"] == "admin") {
            changeable = !role_active && perm_role_admin_add || role_active && perm_role_admin_remove;
        } else {
            changeable = !role_active && perm_role_regular_add || role_active && perm_role_regular_remove;
        }
        $(ctrl).prop("disabled", !changeable);
    }

    var ajax_finalize = function () {
        ctrl_update();
    };
    var notification_format = function (msg) {
        return sprintf("%s | %s", msg, role["name"]);
    };
    var notification = $.notify.create(notification_format("Role is updating"), {type: "info", adjustScroll: true,
        afterHide: function (event, notify) {
            $(this).remove();
        }
    });
    window.setTimeout(function () {
        notification.notify("hide");
    }, 3000);
    $.ajax({method: "POST", url: sprintf("/user/update/%s", user_id),
        contentType: "application/json",
        data: JSON.stringify({op: sprintf("role/%s", role_active ? "add" : "remove"), args: {id_role: id_role}}),
        dataType: "json",
        success: function (data, textStatus, jqXHR) {
            var notification = $.notify.create(notification_format("Permission updated"), {type: "success", adjustScroll: true,
                afterHide: function (event, notify) {
                    $(this).remove();
                }
            });
            window.setTimeout(function () {
                notification.notify("hide");
            }, 3000);
            ajax_finalize();
        },
        error: function (jqXHR, textStatus, errorThrown) {
            var notification = $.notify.create(notification_format("Permission not updated"), {type: "error", adjustScroll: true,
                afterHide: function (event, notify) {
                    $(this).remove();
                }
            });
            ajax_finalize();
        },
        timeout: 3000
    });
};

});
//]]> raw script end
</script>
{%- endblock %}
