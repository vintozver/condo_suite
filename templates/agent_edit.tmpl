{% extends "skeleton" %}

{% block html_header_content -%}
{{ super() }}
<script type="text/javascript"{{ {'src': {'netloc': '', 'path': '/static/agent_edit.js'}|url}|xmlattr }}></script>
{%- endblock %}

{% block title %}Edit - Agent - {{ super() }}{% endblock %}

{% block body_content %}
<div class="agent_list">
<form action="">
<h1>Agent management</h1>
<table>
<thead>
<tr><th>name</th></tr>
</thead>
<tbody><tr><td></td><td></td></tr></tbody><!-- empty row is necessary to conform w3c -->
</table>
</form>
</div>

<div style="display: none;" id="agent_create" title="Add an agent">
<form action="">
<h3>General information</h3>
<table>
<tr><td>Name</td><td><input type="text" name="name" value="" size="32" maxlength="128" class="text ui-widget-content ui-corner-all" /></td></tr>
<tr><td colspan="2">
</td></tr>
</table>
<h3>Address</h3>
<p><label for="address_street">Street</label> <input type="text" name="address_street" value="" size="32" maxlength="256" class="text ui-widget-content ui-corner-all" /></p>
<p><label for="address_city">City</label> <input type="text" name="address_city" value="" size="16" maxlength="128" class="text ui-widget-content ui-corner-all" /></p>
<p>
<label for="address_postal_code">Postal Code</label> <input type="text" name="address_postal_code" value="" size="8" maxlength="16" class="text ui-widget-content ui-corner-all" />
<label>Country</label> <select name="address_country"><option value="">-select-</option>
{% for country in country_list|default([]) -%}
<option {{ {'value': country['code']}|xmlattr }}>{{ country['name']|default('<No name>')|e }}</option>
{%- endfor %}
</select>
</p>
<!-- Allow form submission with keyboard without duplicating the dialog button -->
<div style="display: none;"><input type="submit" /></div>
</form>
</div>

<div style="display: none;" id="agent_close_confirm" title="Close agent?">
<p><span class="ui-icon ui-icon-alert" style="float:left; margin:0 7px 20px 0;"></span>Agent will be permanently closed and cannot be recovered. Are you sure?</p>
</div>

<div style="display: none;" id="agent_update" title="Update the agent">
<form action="">
<h3>General information</h3>
<table>
<tr><td>Name</td><td><input type="text" name="name" value="" size="32" maxlength="128" class="text ui-widget-content ui-corner-all" /></td></tr>
<tr><td colspan="2">
</td></tr>
</table>
<h3>Address</h3>
<p><label for="address_street">Street</label> <input type="text" name="address_street" value="" size="32" maxlength="256" class="text ui-widget-content ui-corner-all" /></p>
<p><label for="address_city">City</label> <input type="text" name="address_city" value="" size="16" maxlength="128" class="text ui-widget-content ui-corner-all" /></p>
<p>
<label for="address_postal_code">Postal Code</label> <input type="text" name="address_postal_code" value="" size="8" maxlength="16" class="text ui-widget-content ui-corner-all" />
<label>Country</label> <select name="address_country"><option value="">-select-</option>
{% for country in country_list|default([]) -%}
<option {{ {'value': country['code']}|xmlattr }}>{{ country['name']|default('<No name>')|e }}</option>
{%- endfor %}
</select>
</p>
<!-- Allow form submission with keyboard without duplicating the dialog button -->
<div style="display: none;"><input type="submit" /></div>
</form>
</div>

<script type="text/javascript">
// raw script begin <![CDATA[
$(function () {

var country_list = {{ country_list|default([])|json }};
var country_name_code_list = [];
country_list.forEach(function(country){
    var obj = {};
    obj['label'] = country.name;
    obj['value'] = country.code;
    country_name_code_list.push(obj);
});

var agent_list_table = $("div.agent_list table");
var agent_list_table_customFooterButtons = new Array();
var agent_list_table_customRowButtons = new Array();
{% if perm_create|default(False) %}
agent_list_table_customFooterButtons.push({uiButton: { icons: { primary: "ui-icon-plus" }, text: false }, btnAttr: { title: "Add an agent" }, atTheFront: true,
    click: function (evt) {
        agent_create_dialog(function (name, address) {
            // Notification: operation pending
            var notification = $.notify.create("Agent is creating", {type: "info", adjustScroll: true,
                afterHide: function (event, notify) {
                    $(this).remove();
                }
            });

            agent_create(name, address,
                function (id_agent) {
                    agent_list_table.appendGrid("appendRow", [{id_agent: id_agent, name: name}]);

                    // Notification: operation complete
                    var notification = $.notify.create("Agent has been created", {type: "success", adjustScroll: true,
                        afterHide: function (event, notify) {
                            $(this).remove();
                        }
                    });
                    window.setTimeout(function () {
                        notification.notify("hide");
                    }, 3000);
                },
                function () {
                    // Notification: operation incomplete
                    var notification = $.notify.create("Agent has NOT been created", {type: "error", adjustScroll: true,
                        afterHide: function (event, notify) {
                            $(this).remove();
                        }
                    });
                }
            );
        });
    }
});
(function() {
    var countries_src = new Array();
    country_list.forEach(function (country) {
        countries_src.push({value: country.id, label: country.name});
    });
    $("div#agent_create form input[type=text][name=address_country_name]").autocomplete({appendTo: "div#agent_create", source: countries_src,
        select: function (event, ui) {
        }
    });
})();
{% endif %}
{% if perm_close|default(False) %}
agent_list_table_customRowButtons.push({ uiButton: { icons: { primary: "ui-icon-minus" }, text: false }, btnAttr: { title: "Close the agent" }, atTheFront: true,
    click: function (evt, uniqueIndex, rowData) {
        var id_agent = agent_list_table.appendGrid("getCtrlValue", "id_agent", agent_list_table.appendGrid("getRowIndex", uniqueIndex));
        var agent_close_confirm_dialog = $("div#agent_close_confirm");
        agent_close_confirm_dialog.dialog({autoOpen: false, resizable: false, width: 400, height: 200, modal: true,
            buttons: {
                "Proceed to close": function () {
                    // Notification: operation pending
                    var notification = $.notify.create("Agent is closing", {type: "info", adjustScroll: true,
                        afterHide: function (event, notify) {
                            $(this).remove();
                        }
                    });

                    agent_close(id_agent,
                        function () {
                            agent_list_table.appendGrid("removeRow", agent_list_table.appendGrid("getRowIndex", uniqueIndex));
                            agent_close_confirm_dialog.dialog("close");

                            // Notification: operation complete
                            var notification = $.notify.create("Agent has been closed", {type: "success", adjustScroll: true,
                                afterHide: function (event, notify) {
                                    $(this).remove();
                                }
                            });
                            window.setTimeout(function () {
                                notification.notify("hide");
                            }, 3000);
                        },
                        function () {
                            agent_close_confirm_dialog.dialog("close");

                            // Notification: operation incomplete
                            var notification = $.notify.create("Agent has NOT been closed", {type: "error", adjustScroll: true,
                                afterHide: function (event, notify) {
                                    $(this).remove();
                                }
                            });
                        }
                    );
                },
                Cancel: function () {
                    agent_close_confirm_dialog.dialog("close");
                }
            }
        });
        agent_close_confirm_dialog.dialog("open");
    }
});
{% endif %}
{% if perm_update|default(False) %}
agent_list_table_customRowButtons.push({ uiButton: { icons: { primary: "ui-icon-pencil" }, text: false }, btnAttr: { title: "Update the agent details" }, atTheFront: true,
    click: function (evt, uniqueIndex, rowData) {
        var rowIndex = agent_list_table.appendGrid("getRowIndex", uniqueIndex);
        var id_agent = agent_list_table.appendGrid("getCtrlValue", "id_agent", rowIndex);
        $.ajax({method: "POST", url: "/agent/edit", contentType: "application/json", data: JSON.stringify({op: "get", args: {id: id_agent}}), dataType: "json",
            success: function (data, textStatus, jqXHR) {
                var name = data["name"] || "";
                var address = data["address"] || {};
                agent_update_dialog(name, address, agent_update_dialog_callback);
            },
            error: function (jqXHR, textStatus, errorThrown) {
                agent_update_dialog("", "", "", "", [], agent_update_dialog_callback);
            },
            timeout: 3000
        });

        var agent_update_dialog_callback = function (name, address) {
            // Notification: operation pending
            var notification = $.notify.create("Agent is updating", {type: "info", adjustScroll: true,
                afterHide: function (event, notify) {
                    $(this).remove();
                }
            });

            agent_update(id_agent, name, address,
                function () {
                    agent_list_table.appendGrid("setCtrlValue", "name", rowIndex, name);

                    // Notification: operation complete
                    var notification = $.notify.create("Agent has been updated", {type: "success", adjustScroll: true,
                        afterHide: function (event, notify) {
                            $(this).remove();
                        }
                    });
                    window.setTimeout(function () {
                        notification.notify("hide");
                    }, 3000);
                },
                function () {
                    // Notification: operation incomplete
                    var notification = $.notify.create("Agent has NOT been updated", {type: "error", adjustScroll: true,
                        afterHide: function (event, notify) {
                            $(this).remove();
                        }
                    });
                }
            );
        };
    }
});
{% endif %}
agent_list_table.appendGrid({
	columns: [
	    {type: "hidden", "name": "id_agent"},
		{type: "text", name: "name", display: "Name", displayCss: {"min-width": "8em", "width": "32em"}, resizable: true, ctrlProp: {readonly: true, maxLength: 128, size: 32}}
	],
	i18n: {
	    rowEmpty: "No agents"
	},
	initRows: 0,
	hideRowNumColumn: true,
	customRowButtons: agent_list_table_customRowButtons,
	customFooterButtons: agent_list_table_customFooterButtons,
	hideButtons: { moveUp: true, moveDown: true, insert: true, removeLast: true, append: true, remove: true }
});
{{ agent_list|json }}.forEach(function (agent) {
    agent_list_table.appendGrid("appendRow", [{id_agent: agent.id, name: agent.name}]);
});

});

//]]> raw script end
</script>
{%- endblock %}
